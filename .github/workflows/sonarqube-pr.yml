name: Quality Check On PR

on:
    pull_request:
        branches: [master]

jobs:
    quality-check-on-pr:
        runs-on: [rnd-it-ubuntu]
        steps:
            - uses: actions/checkout@v3
              with:
                  fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
                  lfs: true
                  submodules: "recursive"
                  token: ${{secrets.ACTIONS_BOT_TOKEN}}

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: "3.9"

            - name: Login to Docker Hub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Run coverage in docker
              env:
                  DOCKER_BUILDKIT: 1
              run: |
                  docker build --target dev-coverage --tag docker_name:dev-coverage .
                  docker create --name=container_name docker_name:dev-coverage
                  docker cp container_name:/app/junit.xml .
                  docker cp container_name:/app/coverage.xml .
                  docker cp container_name:/app/htmlcov .
                  docker rm -v container_name

            - name: Comment Code Coverage For Changes
              id: coverage-comment
              uses: vcosmos-actions/pytest-coverage-comment@main
              with:
                  pytest-xml-coverage-path: ./coverage.xml
                  junitxml-path: ./junit.xml
                  report-only-changed-files: true

            - name: Calculate Code Coverage For All
              id: coverage-readme
              uses: vcosmos-actions/pytest-coverage-comment@main
              with:
                  pytest-xml-coverage-path: ./coverage.xml
                  junitxml-path: ./junit.xml
                  hide-comment: true

            - uses: vcosmos-actions/sonarqube-scan-action@master
              env:
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
                  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
              with:
                  args: >
                      -Dsonar.projectKey=vcosmos_${{ github.event.repository.name }}
                      -Dsonar.sources=src/app/,src/static/
                      -Dsonar.tests=src/tests/
                      -Dsonar.python.coverage.reportPaths=coverage.xml

            - uses: vcosmos-actions/sonarqube-quality-gate-action@master
              if: false # Skip quality gate, too strict
              timeout-minutes: 5
              env:
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
                  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

            - name: Update Code Coverage Summary Report On README
              run: |
                  summay=${{ steps.coverage-readme.outputs.summaryReport }}
                  summay="${summay%\"}"
                  summay="${summay#\"}"
                  sed -i "/<!-- Pytest Coverage Comment:Begin -->/,/<!-- Pytest Coverage Comment:End -->/ c \
                  <!-- Pytest Coverage Comment:Begin -->\n${summay}\n<!-- Pytest Coverage Comment:End -->" ./README.md

            # do it on master and create PR or do it in PR and when? should not repeat if coverage no changes
            # - name: Commit Changes
            #   uses: vcosmos-actions/git-auto-commit-action@v4
            #   with:
            #       commit_message: ðŸ§ª Update Coverage on Readme
            #       commit_user_name: Mason Lin
            #       commit_user_email: mason.lin1@hp.com
            #       commit_author: Mason Lin <mason.lin1@hp.com>
            #       file_pattern: "README.md"

            - name: Fail if test got failure
              run: |
                  echo "Coverage Errors - ${{ steps.coverage-readme.outputs.errors }}"
                  echo "Coverage Failures - ${{ steps.coverage-readme.outputs.failures }}"
                  sonar_errors=${{ steps.coverage-readme.outputs.errors }}
                  sonar_failures=${{ steps.coverage-readme.outputs.failures }}
                  if (( ${sonar_errors} > 0 )); then
                      echo "âœ– Tests has ERRORS."; exit 1;
                  fi
                  if (( ${sonar_failures} > 0 )); then
                      echo "âœ– Tests has FAILED."; exit 1;
                  fi
