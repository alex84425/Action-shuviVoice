[tool.poetry]
name = "action-executortemplate"
version = "1.2.0"
description = "action-executortemplate"
authors = ["Mason Lin <mason.lin1@hp.com>"]

[tool.poetry.dependencies]
python = "^3.9"
fastapi = {extras = ["all"], version = "^0.95.2"}
requests = "^2.30.0"
uvicorn = {extras = ["standard"], version = "^0.22.0"}
ansi2html = "^1.8.0"
python-multipart = "^0.0.6"
vcosmosapiclient = {path = "ActionTemplate-Python3", develop = true}

[tool.poetry.group.dev.dependencies]
pytest = "^7.3.1"
pytest-asyncio = "^0.21.0"
pytest-mock = "^3.10.0"
pytest-xdist = "^3.3.0"
coverage = {extras = ["toml"], version = "^7.2.5"}
black = "^23.3.0"
requests-toolbelt = "^1.0.0"
pre-commit = "^3.3.2"
pytest-httpx = "^0.22.0"
pytest-cov = "^4.0.0"
bandit = "^1.7.5"
ruff = "^0.0.269"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -s -v --log-cli-level=DEBUG -p no:warnings --junitxml=junit.xml --strict-markers"
asyncio_mode = "strict"
norecursedirs = ["ActionTemplate-Python3", "integration"]

[tool.coverage.run]
branch = true
relative_files = true
omit = ["src/tests/*", "ActionTemplate-Python3/*"]

[tool.codespell]
builtin = "clear,rare,informal,code,names,usage,en-GB_to_en-US"
ignore-words-list = "master,cancelled"
quiet-level = 3
skip = ".git,*.lock,htmlcov,ActionTemplate-Python3"

[tool.ruff]
# https://beta.ruff.rs/docs/rules/
extend-exclude = ["ActionTemplate-Python3", "integration", "tests", "src/tests", "scripts"]
# The following rules are currently not implemented by ruff, but we intend to ignore
# "E203","W503","W0511","W0613","W0703","W0707","W1203",
ignore = [
  "B008",    # do not perform function calls in argument defaults
  "B904",    # Within an except clause, raise exceptions with raise ... from err or raise ... from None to distinguish them from errors in exception handling
  "C901",    # mccabe, too complex
  "D1",      # missing public docstrings
  "D203",    # 1 blank line required before class docstring
  "D205",    # 1 blank line required between summary line and description
  "D213",    # Multi-line docstring summary should start at the second line
  "D400",    # First line should end with a period
  "D401",    # (docstring imperative mood) Overly restrictive.
  "D404",    # First word of the docstring should not be "This"
  "D417",    # Missing argument descriptions in the docstring
  "DTZ005",  # The use of `datetime.datetime.now()` without `tz` argument is not allowed
  "E402",    # Module level import not at top of file
  "E501",    # line too long, handled by black
  'E722',    # (bare exception): There are many places where we want to catch a maximally generic exception.
  "E731",    # Do not assign a lambda expression, use a def
  "E741",    # ambiguous-variable-name
  "EXE002",  # The file is executable but no shebang is present
  "G001",    # logging-string-format Logging statement uses string.format()
  "G002",    # logging-percent-format Logging statement uses %
  "G003",    # logging-string-concat Logging statement uses +
  "G004",    # logging-f-string Logging statement uses f-string
  "ERA",     # eradicate, Found commented-out code
  "PT023",   # Use `@pytest.mark.asyncio()` over `@pytest.mark.asyncio`
  "PTH123",  # open() should be replaced by Path.open()
  "PLR0913", # Too many arguments to function call
  "PGH003",  # Use specific rule codes when ignoring type issues
  "PGH004",  # Use specific rule codes when using noqa
  "RUF100",  # Unused `noqa` directive
]
select = [
  "A",   # flake8-builtins
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "D",   # pydocstyle
  "DTZ", # flake8-datetimez
  "EXE", # flake8-executable
  "G",   # flake8-logging-format
  "E",   # pycodestyle errors
  "F",   # pyflakes
  "I",   # isort
  "ICN", # flake8-import-conventions
  "ISC", # flake8-implicit-str-concat
  "PGH", # pygrep-hooks
  "PIE", # flake8-pie
  "PLC", # Pylint Convention
  "PLE", # Pylint Error
  "PLR", # Pylint Refactor
  "PLW", # Pylint Warning
  "PT",  # flake8-pytest-style
  "PTH", # flake8-use-pathlib
  "PYI", # flake8-pyi
  "Q",   # flake8-quotes
  "RET", # flake8-return
  "RSE", # flake8-raise
  "RUF", # ruff
  "S",   # flake8-bandit
  "SIM", # flake8-simplify
  "SLF", # flake8-self
  "T10", # flake8-debugger
  "T20", # flake8-print
  "TID", # flake8-tidy-imports
  "UP",  # pyupgrade
  "W",   # pycodestyle warnings
]
line-length = 140
show-source = true
src = ["src", "/app"]
target-version = "py39"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
